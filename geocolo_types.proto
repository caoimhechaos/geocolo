// Copyright (c) 2012 Tonnerre Lombard <tonnerre@ancient-solutions.com>,
//                    Ancient Solutions. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions  of source code must retain  the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions  in   binary  form  must   reproduce  the  above
//    copyright  notice, this  list  of conditions  and the  following
//    disclaimer in the  documentation and/or other materials provided
//    with the distribution.
//
// THIS  SOFTWARE IS  PROVIDED BY  ANCIENT SOLUTIONS  AND CONTRIBUTORS
// ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO,  THE IMPLIED WARRANTIES OF  MERCHANTABILITY AND FITNESS
// FOR A  PARTICULAR PURPOSE  ARE DISCLAIMED.  IN  NO EVENT  SHALL THE
// FOUNDATION  OR CONTRIBUTORS  BE  LIABLE FOR  ANY DIRECT,  INDIRECT,
// INCIDENTAL,   SPECIAL,    EXEMPLARY,   OR   CONSEQUENTIAL   DAMAGES
// (INCLUDING, BUT NOT LIMITED  TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE,  DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT  LIABILITY,  OR  TORT  (INCLUDING NEGLIGENCE  OR  OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.

package geocolo;

// Request to the geoproximity service to figure out which of the
// countries specified in "candidates" are closest to "origin".
message GeoProximityRequest {
	// Country which we're looking for close countries for.
	required string origin = 1;

	// Whether or not to fill the distance vector data into the
	// response.
	required bool detailed_response = 2;

	// Potentially a list of countries to consider; otherwise,
	// a full list of all countries on planet earth is used.
	repeated string candidates = 3;
}

// Geoproximity data for a specific location.
message GeoProximityDetail {
	required string country = 1;
	required double distance = 2;
}

// Full response for the geodata request.
message GeoProximityResponse {
	// The single closest country. If multiple candidates with
	// the same distance matched, the alphabetically first one
	// will be chosen.
	required string closest = 1;

	// If a detailed response was requested, this will contain
	// a list of all candidates or countries and their proximity
	// data.
	repeated GeoProximityDetail full_map = 2;
}

// Configuration for the GeoProximityService. Contains mainly the
// PostgreSQL connection parameters.
message GeoProximityServiceConfig {
	required string user = 1;
	required string dbname = 2;
	optional string sslmode = 3;
	required string host = 4;
	required int32 port = 5;
}

service GeoProximityService {
	rpc GetProximity (GeoProximityRequest) returns (GeoProximityResponse);
}
